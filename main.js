!function(){"use strict";var e=class{constructor(e,t,s,r,i){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=r,this._handleLikeButton=i,this._id=e._id,this.isLiked=e.isLiked}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeButton(this))),this._deleteButton.addEventListener("click",(()=>this._handleDeleteButton(this))),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this)}))}handleLikeToggle(e){this.isLiked=e,this._renderLikes()}_renderLikes(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}removeCard(){this._element.remove(),this._element=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImageEl=this._element.querySelector(".card__image"),this._cardTitleEl=this._element.querySelector(".card__title"),this._cardTitleEl.textContent=this.name,this._cardImageEl.src=this.link,this._cardImageEl.alt=this.name,this._renderLikes(),this._setEventListeners(),this._element}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableSubmitButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}toggleButtonState(){this._hasInvalidInput()?this.disableSubmitButton():this._enableSubmitButton()}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this.toggleButtonState()}},s=class{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}},r=class extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll(".form__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setSubmit(e){this._handleFormSubmit=e}renderLoading(e){this._submitButton=this._popupElement.querySelector(".form__button"),this._submitButton.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}};const i=document.forms["card-form"],n=document.querySelector("#profile-edit-button"),o=document.querySelector(".profile__add-button"),a=(i.querySelector(".form__button"),document.querySelector("#profile-title-input")),l=document.querySelector("#profile-description-input"),c=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{method:"GET",headers:this.headers}).then((e=>e.json())).then((e=>e)).catch((e=>{console.log(e)}))}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then((e=>e.json())).catch((e=>{console.log(e)}))}updateProfileInfo(e,t){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.json())).catch((e=>{console.log(e)}))}updateAvatar(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then((e=>e.json()))}addNewCard(e){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.json()))}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers})}addLikes(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers})}removeLikes(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2f044ea7-089c-4434-a9ef-24932c8b1246","Content-Type":"application/json"}}),d=new r("#edit-avatar",(function(e){console.log(e),d.renderLoading(!0),c.updateAvatar(e.link).then((()=>{console.log(e),h.setUserAvatar(e.link)})).catch((e=>{console.error(e)})).finally((()=>{d.renderLoading(!1),d.close()}))}));d.setEventListeners(),document.querySelector(".profile__image-button").addEventListener("click",(()=>{d.open()}));const h=new class{constructor(e){let{titleSelector:t,descriptionSelector:s,avatarSelector:r}=e;this._profileTitle=document.querySelector(t),this._profileDescription=document.querySelector(s),this._profileAvatar=document.querySelector(r)}getUserInfo(){return this._userInfo={name:this._profileTitle.textContent,about:this._profileDescription.textContent,avatar:this._profileAvatar.src},this._userInfo}setUserInfo(e,t){this._profileTitle.textContent=e,console.log(e),this._profileDescription.textContent=t}setUserAvatar(e){this._profileAvatar.src=e}}({titleSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"});c.getUserInfo().then((e=>{h.setUserInfo(e.name,e.about),h.setUserAvatar(e.avatar)})).catch((e=>{console.error(e)}));const u=new r("#profile-edit-modal",(function(e){u.renderLoading(!0),c.updateProfileInfo(e.name,e.about).then((e=>{h.setUserInfo(e.name,e.about),u.close()})).catch((e=>{console.error(e)})).finally((()=>{u.renderLoading(!1)}))}));u.setEventListeners(),n.addEventListener("click",(()=>{const e=h.getUserInfo();a.value=e.name,l.value=e.about,u.open(),L["profile-form"].resetValidation()}));const _=new r("#add-card-modal",(function(e){_.renderLoading(!0),c.addNewCard(e).then((e=>{m.addItem(p(e)),_.close(),i.reset(),L["card-form"].disableSubmitButton()})).catch((e=>{console.error(e)})).finally((()=>{_.renderLoading(!1)}))}));_.setEventListeners(),o.addEventListener("click",(()=>_.open()));const m=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.reverse().forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>{m.addItem(p(e))}},".cards__list");function p(t){return new e(t,"#card-template",b,E,f).getView()}function f(e){e.isLiked?c.removeLikes(e._id).then((()=>{e.handleLikeToggle(!1)})).catch((e=>{console.error(e)})):c.addLikes(e._id).then((()=>{e.handleLikeToggle(!0)})).catch((e=>{console.error(e)}))}c.getInitialCards().then((e=>{console.log(e),e.forEach((e=>{m.addItem(p(e))}))})).catch((e=>{console.error(e)}));const v=new r("#modal-delete");function E(e){v.open(),v.setSubmit((()=>{console.log(e),c.deleteCard(e._id).then((()=>{e.removeCard()})).catch((e=>{console.error(e)}))}))}v.setEventListeners();const S=new class extends s{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".modal__preview-image"),this._previewTitle=this._popupElement.querySelector(".modal__preview-title")}open(e){let{name:t,link:s}=e;this._previewImage.src=s,this._previewImage.alt=t,this._previewTitle.textContent=t,super.open()}}("#preview-image-modal");function b(e){S.open(e)}S.setEventListeners();const L={};var g;g={formSelector:".modal__form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},Array.from(document.querySelectorAll(g.formSelector)).forEach((e=>{const s=new t(g,e),r=e.getAttribute("name");L[r]=s,s.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,